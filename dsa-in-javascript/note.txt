function maxArea(arr) {
    let left = 0;                        // 1. Initialize `left` pointer to the first index.
    let right = arr.length - 1;           // 2. Initialize `right` pointer to the last index.
    let maxarea = 0;                      // 3. Initialize `maxarea` to 0, to track the largest area.

    while (left < right) {                // 4. Loop while `left` is less than `right`.
        console.log(left, right);         // 5. Print current values of `left` and `right` pointers for debugging.

        let ht = Math.min(arr[left], arr[right]);  // 6. The height of the rectangle is the minimum of arr[left] and arr[right].
        maxarea = Math.max(maxarea, ht * (right - left));  // 7. Calculate the current area and update `maxarea` if the new area is larger.

        if (arr[left] < arr[right]) {     // 8. Move the `left` pointer if its height is less than the `right` pointer's height.
            left++;
        } else {
            right--;                      // 9. Otherwise, move the `right` pointer inward.
        }
    }

    return maxarea;                       // 10. Once the loop is finished, return the largest area found.
}

const arr = [9, 8, 6, 2, 5, 4, 8, 3, 0];   // 11. An example input array to test the function.
console.log(maxArea(arr));                 // 12. Output the result of the `maxArea` function.


Step-by-Step Dry Run:
Initial Setup:

The array arr = [9, 8, 6, 2, 5, 4, 8, 3, 0].
left = 0 (first index), right = arr.length - 1 = 8 (last index), and maxarea = 0.

Iteration 1:

left = 0, right = 8.
Heights: arr[left] = 9, arr[right] = 0.
ht = Math.min(9, 0) = 0.
Area: ht * (right - left) = 0 * (8 - 0) = 0.
maxarea = Math.max(0, 0) = 0 (no update).
Since arr[left] > arr[right], right--, so right = 7.

Iteration 2:

left = 0, right = 7.
Heights: arr[left] = 9, arr[right] = 3.
ht = Math.min(9, 3) = 3.
Area: 3 * (7 - 0) = 3 * 7 = 21.
maxarea = Math.max(0, 21) = 21 (updated).
Since arr[left] > arr[right], right--, so right = 6.

Iteration 3:

left = 0, right = 6.
Heights: arr[left] = 9, arr[right] = 8.
ht = Math.min(9, 8) = 8.
Area: 8 * (6 - 0) = 8 * 6 = 48.
maxarea = Math.max(21, 48) = 48 (updated).
Since arr[left] > arr[right], right--, so right = 5.

Iteration 4:

left = 0, right = 5.
Heights: arr[left] = 9, arr[right] = 4.
ht = Math.min(9, 4) = 4.
Area: 4 * (5 - 0) = 4 * 5 = 20.
maxarea = Math.max(48, 20) = 48 (no update).
Since arr[left] > arr[right], right--, so right = 4.

Iteration 5:

left = 0, right = 4.
Heights: arr[left] = 9, arr[right] = 5.
ht = Math.min(9, 5) = 5.
Area: 5 * (4 - 0) = 5 * 4 = 20.
maxarea = Math.max(48, 20) = 48 (no update).
Since arr[left] > arr[right], right--, so right = 3.

Iteration 6:

left = 0, right = 3.
Heights: arr[left] = 9, arr[right] = 2.
ht = Math.min(9, 2) = 2.
Area: 2 * (3 - 0) = 2 * 3 = 6.
maxarea = Math.max(48, 6) = 48 (no update).
Since arr[left] > arr[right], right--, so right = 2.

Iteration 7:

left = 0, right = 2.
Heights: arr[left] = 9, arr[right] = 6.
ht = Math.min(9, 6) = 6.
Area: 6 * (2 - 0) = 6 * 2 = 12.
maxarea = Math.max(48, 12) = 48 (no update).
Since arr[left] > arr[right], right--, so right = 1.

Iteration 8:

left = 0, right = 1.
Heights: arr[left] = 9, arr[right] = 8.
ht = Math.min(9, 8) = 8.
Area: 8 * (1 - 0) = 8 * 1 = 8.
maxarea = Math.max(48, 8) = 48 (no update).
Since arr[left] > arr[right], right--, so right = 0.
End of Loop:
The loop ends because left = 0 is no longer less than right = 0.
The function returns maxarea = 48.